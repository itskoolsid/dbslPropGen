package com.dbsl.proposalgenerator.beans;

// Generated Sep 25, 2015 9:10:21 AM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Category generated by hbm2java
 */
@Entity
@Table(name = "category", catalog = "dbsl_proposal_generator")
public class Category implements java.io.Serializable {

	private Integer id;
	private Solution solution;
	private String title;
	private String name;
	private Date createdOn;
	private Float oneOffCost;
	private Boolean isActive;
	private Set<MonthlyCostCatagory> monthlyCostCatagories = new HashSet<MonthlyCostCatagory>(
			0);
	private Set<Hardware> hardwares = new HashSet<Hardware>(0);
	private Set<OtherService> otherServices = new HashSet<OtherService>(0);
	private Set<StaticText> staticTexts = new HashSet<StaticText>(0);

	public Category() {
	}

	public Category(Solution solution) {
		this.solution = solution;
	}

	public Category(Solution solution, String title, String name,
			Date createdOn, Float oneOffCost, Boolean isActive,
			Set<MonthlyCostCatagory> monthlyCostCatagories,
			Set<Hardware> hardwares, Set<OtherService> otherServices,
			Set<StaticText> staticTexts) {
		this.solution = solution;
		this.title = title;
		this.name = name;
		this.createdOn = createdOn;
		this.oneOffCost = oneOffCost;
		this.isActive = isActive;
		this.monthlyCostCatagories = monthlyCostCatagories;
		this.hardwares = hardwares;
		this.otherServices = otherServices;
		this.staticTexts = staticTexts;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SOLUTION_id", nullable = false)
	public Solution getSolution() {
		return this.solution;
	}

	public void setSolution(Solution solution) {
		this.solution = solution;
	}

	@Column(name = "title")
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createdOn", length = 19)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Column(name = "oneOffCost", precision = 12, scale = 0)
	public Float getOneOffCost() {
		return this.oneOffCost;
	}

	public void setOneOffCost(Float oneOffCost) {
		this.oneOffCost = oneOffCost;
	}

	@Column(name = "isActive")
	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<MonthlyCostCatagory> getMonthlyCostCatagories() {
		return this.monthlyCostCatagories;
	}

	public void setMonthlyCostCatagories(
			Set<MonthlyCostCatagory> monthlyCostCatagories) {
		this.monthlyCostCatagories = monthlyCostCatagories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<Hardware> getHardwares() {
		return this.hardwares;
	}

	public void setHardwares(Set<Hardware> hardwares) {
		this.hardwares = hardwares;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<OtherService> getOtherServices() {
		return this.otherServices;
	}

	public void setOtherServices(Set<OtherService> otherServices) {
		this.otherServices = otherServices;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "catagory_has_static_text", catalog = "dbsl_proposal_generator", joinColumns = { @JoinColumn(name = "CATEGORY_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "STATIC_TEXT_id", nullable = false, updatable = false) })
	public Set<StaticText> getStaticTexts() {
		return this.staticTexts;
	}

	public void setStaticTexts(Set<StaticText> staticTexts) {
		this.staticTexts = staticTexts;
	}

}
